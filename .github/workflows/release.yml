name: Release
on:
  push:
    tags:
      - "v2*"
jobs:
  build_binary:
    strategy:
      matrix:
        os: ["ubuntu-20.04", "ubuntu-22.04", "macos-11", "macos-12"]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - uses: extractions/setup-just@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - run: just build-rust-release
      - uses: actions/upload-artifact@v3
        with:
          name: stork-${{ matrix.os }}
          path: ./target/release/stork

  build_web_artifacts:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: "wasm32-unknown-unknown"
      - uses: Swatinem/rust-cache@v2
      - uses: extractions/setup-just@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - run: sudo apt-get install -y binaryen # wasm-opt
      - run: cargo install wasm-pack
        if: steps.rust-cache.outputs.cache-hit != 'true'
      - run: just build-js-release
      - uses: actions/upload-artifact@v3
        with:
          name: web-artifacts
          path: ./js/dist

  build_indexes:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - uses: extractions/setup-just@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - run: just submodules
      - run: just rebuild-dev-indexes
      - uses: actions/upload-artifact@v3
        with:
          name: indexes
          path: ./dev/indexes

  release:
    name: Create release
    needs: ["build_binary", "build_web_artifacts", "build_indexes"]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v3
      - run: ls -lR
      - name: Create Release
        id: create_release
        uses: ncipollo/release-action@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          draft: true
          prerelease: false
          skipIfReleaseExists: true
          artifactErrorsFailBuid: true
          artifacts: ""

  upload:
    name: Upload to S3
    needs: ["build_binary", "build_web_artifacts", "build_indexes"]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: "3.x"
      - uses: actions/download-artifact@v3
      - run: ls -lR
      - run: python -m pip install --upgrade pip
      - run: pip install boto3
      - run: python ./scripts/upload_build_artifacts.py ${{ github.ref }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID  }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY  }}
